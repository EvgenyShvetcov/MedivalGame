import { DataSource } from 'typeorm';
import { Location } from '../location/entities/location.entity';
import { config } from 'dotenv';

config();

const AppDataSource = new DataSource({
  type: 'postgres',
  url:
    process.env.DATABASE_URL ??
    `postgres://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`,
  synchronize: false,
  migrationsRun: false,
  entities: [Location],
});

async function seed() {
  await AppDataSource.initialize();
  const repo = AppDataSource.getRepository(Location);

  const city = repo.create({
    key: 'city',
    name: '–ì–æ—Ä–æ–¥',
    description:
      '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è –º–∏—Ä–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –Ω–∞ –∞—Ä–µ–Ω—É.',
    imageUrl: '/static/locations/city.jpg',
    isCity: true,
  });

  const arena = repo.create({
    key: 'arena',
    name: '–ê—Ä–µ–Ω–∞',
    description: '–ú–µ—Å—Ç–æ, –≥–¥–µ –±–æ–π—Ü—ã —Å—Ö–æ–¥—è—Ç—Å—è –≤ —á–µ—Å—Ç–Ω–æ–π –±–∏—Ç–≤–µ.',
    imageUrl: '/static/locations/arena.jpg',
    isBattleArena: true,
  });

  const shop = repo.create({
    key: 'shop',
    name: '–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Å—Ç',
    description: '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.',
    imageUrl: '/static/locations/shop.jpg',
    isShop: true,
  });

  const forest = repo.create({
    key: 'forest',
    name: '–õ–µ—Å',
    description: '–¢—ë–º–Ω—ã–π –∏ –≥—É—Å—Ç–æ–π –ª–µ—Å, –ø–æ–ª–Ω—ã–π –∑–∞–≥–∞–¥–æ–∫.',
    imageUrl: '/static/locations/forest.jpg',
  });

  const camp = repo.create({
    key: 'camp',
    name: '–õ–∞–≥–µ—Ä—å –±–∞–Ω–¥–∏—Ç–æ–≤',
    description: '–û–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –æ–±–∏—Ç–∞—é—Ç —Ä–∞–∑–±–æ–π–Ω–∏–∫–∏.',
    imageUrl: '/static/locations/camp.jpg',
  });

  const castle = repo.create({
    key: 'castle',
    name: '–ó–∞–º–æ–∫',
    description: '–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∑–∞–º–æ–∫, –ø—Ä–µ–≤—Ä–∞—â—ë–Ω–Ω—ã–π –≤ –∞—Ä–µ–Ω—É.',
    imageUrl: '/static/locations/castle.jpg',
    isBattleArena: true,
  });

  await repo.save([city, arena, shop, forest, camp, castle]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏
  city.availableDestinations = [arena, shop, forest];
  arena.availableDestinations = [city];
  shop.availableDestinations = [city];
  forest.availableDestinations = [city, camp, castle];
  camp.availableDestinations = [forest];
  castle.availableDestinations = [forest];

  await repo.save([city, arena, shop, forest, camp, castle]);

  console.log('üåç –ü–æ–ª–Ω—ã–π –º–∏—Ä –∑–∞—Å–µ—è–Ω');
  await AppDataSource.destroy();
}

seed().catch((err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å–µ–≤–µ:', err);
  process.exit(1);
});
