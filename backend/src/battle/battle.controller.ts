import {
  Controller,
  Get,
  Post,
  Param,
  Delete,
  Body,
  UseGuards,
  Patch,
  Req,
} from '@nestjs/common';
import { BattleService } from './battle.service';
import { MatchmakingService } from './matchmaking.service';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiBody,
  ApiBearerAuth,
} from '@nestjs/swagger';
import { CreateBattleDto } from './dto/create-battle.dto';
import { JwtAuthGuard } from 'src/auth/jwt-auth.guard';
import { CurrentPlayer } from 'src/auth/decorators/current-player.decorator';
import { ChooseUnitDto } from './dto/choose-unit.dto';
import { Battle } from './entities/battle.entity';
import { RequestWithUser } from 'src/auth/types';

@ApiTags('Battle')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@Controller('battle')
export class BattleController {
  constructor(
    private readonly battleService: BattleService,
    private readonly matchmakingService: MatchmakingService,
  ) {}

  @Post()
  @ApiOperation({ summary: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã' })
  @ApiResponse({ status: 201, description: '–ë–∏—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–∞', type: Battle })
  @ApiResponse({ status: 401, description: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' })
  create(
    @CurrentPlayer() player: { userId: string },
    @Body() dto: CreateBattleDto,
  ) {
    return this.battleService.create(dto, player.userId);
  }

  @Get()
  @ApiOperation({ summary: '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∏—Ç–≤' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –±–∏—Ç–≤', type: [Battle] })
  findAll() {
    return this.battleService.findAll();
  }

  @Get('current')
  @ApiOperation({ summary: '–¢–µ–∫—É—â–∞—è –±–∏—Ç–≤–∞ –∏–≥—Ä–æ–∫–∞' })
  async getCurrentBattle(@CurrentPlayer() player: { userId: string }) {
    return this.battleService.getCurrentBattle(player.userId);
  }

  @Get(':id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏—Ç–≤—ã –ø–æ ID' })
  @ApiParam({ name: 'id' })
  @ApiResponse({ status: 200, description: '–ë–∏—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–∞', type: Battle })
  findOne(@Param('id') id: string) {
    return this.battleService.findOne(id);
  }

  @Delete(':id')
  @ApiOperation({ summary: '–£–¥–∞–ª–µ–Ω–∏–µ –±–∏—Ç–≤—ã –ø–æ ID' })
  @ApiParam({ name: 'id' })
  @ApiResponse({ status: 200, description: '–ë–∏—Ç–≤–∞ —É–¥–∞–ª–µ–Ω–∞' })
  remove(@Param('id') id: string) {
    return this.battleService.remove(id);
  }

  @Post(':id/choose-unit')
  async chooseUnit(
    @Param('id') battleId: string,
    @CurrentPlayer() player: { userId: string },
    @Body() dto: ChooseUnitDto,
  ) {
    console.log('üéØ [Controller] chooseUnit ->', {
      battleId,
      userId: player.userId,
      unitId: dto.unitId,
    });
    return this.battleService.chooseUnit(player.userId, battleId, dto.unitId);
  }

  @Post(':id/process-turn')
  @ApiOperation({ summary: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –±–æ—è (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —é–Ω–∏—Ç–æ–≤)' })
  @ApiParam({ name: 'id', description: 'ID –±–∏—Ç–≤—ã' })
  @ApiResponse({ status: 200, description: '–•–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', type: Battle })
  @ApiResponse({ status: 404, description: '–ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  async processTurn(@Param('id') battleId: string) {
    return this.battleService.processBattleTurn(battleId);
  }

  @Get(':id/logs')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –±–∏—Ç–≤—ã –ø–æ ID' })
  @ApiParam({ name: 'id', description: 'ID –±–∏—Ç–≤—ã' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤' })
  async getBattleLogs(@Param('id') battleId: string) {
    return this.battleService.getLogsForBattle(battleId);
  }

  @Post('search')
  @ApiOperation({ summary: '–í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞ –±–∏—Ç–≤—ã' })
  async searchForBattle(@CurrentPlayer() player: { userId: string }) {
    const foundBattle = await this.matchmakingService.joinQueue(player.userId);
    return foundBattle || { message: '–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω' };
  }

  @Post('cancel-search')
  @ApiOperation({ summary: '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –±–∏—Ç–≤—ã' })
  async cancelSearch(@CurrentPlayer() player: { userId: string }) {
    this.matchmakingService.leaveQueue(player.userId);
    return { message: '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω' };
  }

  @Post('with-bot')
  @ApiOperation({ summary: '–ù–∞—á–∞—Ç—å –±–æ–π –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞' })
  async startBotBattle(@CurrentPlayer() player: { userId: string }) {
    return this.battleService.createBotBattle(player.userId);
  }

  @Patch('leave')
  @UseGuards(JwtAuthGuard)
  async leaveBattle(@Req() req: RequestWithUser) {
    const playerId = req.user.id;
    await this.battleService.leaveBattle(playerId);
    return { message: '–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –±–æ–π' };
  }
}
