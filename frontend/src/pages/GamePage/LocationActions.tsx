import { FC } from "react";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "@/store";
import { changeLocationRequest } from "@/store/player";
import {
  searchBattleRequest,
  startBotBattleRequest,
  cancelSearchRequest,
} from "@/store/battle";
import Spinner from "@/components/Spinner/Spinner";
import { ActionsWrapper, Title, Description, DestinationsList } from "./styled";
import { Button } from "@/components/Button/Button";

const LocationActions: FC = () => {
  const dispatch = useDispatch();
  const player = useSelector((state: RootState) => state.player.data);
  const location = player?.location;
  const destinations = location?.availableDestinations ?? [];
  const isSearching = useSelector(
    (state: RootState) => state.battle.isSearching
  );

  const handleMove = (key: string) => {
    dispatch(changeLocationRequest(key));
  };

  const renderLocationUI = () => {
    if (location?.isBattleArena) {
      return (
        <>
          <h3>‚öîÔ∏è –í—ã –Ω–∞ –∞—Ä–µ–Ω–µ</h3>

          {isSearching ? (
            <>
              <Spinner variant="battle" text="‚è≥ –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞..." />
              <Button
                variant="battle"
                onClick={() => dispatch(cancelSearchRequest())}
              >
                ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫
              </Button>
            </>
          ) : (
            <>
              <Button
                variant="battle"
                onClick={() => dispatch(startBotBattleRequest())}
              >
                ü§ñ –ù–∞—á–∞—Ç—å –±–æ–π —Å –±–æ—Ç–æ–º
              </Button>
              <Button
                variant="battle"
                onClick={() => dispatch(searchBattleRequest())}
              >
                üßë –ù–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
              </Button>
            </>
          )}
        </>
      );
    }

    if (location?.isShop) {
      return (
        <>
          <h3>üõí –í—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ</h3>
          <Button variant="default" disabled>
            üì¶ –û—Ç–∫—Ä—ã—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç (–∑–∞–≥–ª—É—à–∫–∞)
          </Button>
        </>
      );
    }

    return <p>–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –º–µ—Å—Ç–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é.</p>;
  };

  return (
    <ActionsWrapper>
      <Title>{location?.name}</Title>
      <Description>{location?.description}</Description>

      {renderLocationUI()}

      <h4 style={{ marginTop: "1.2rem" }}>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:</h4>
      <DestinationsList>
        {destinations.map((loc) => (
          <Button
            key={loc.key}
            onClick={() => handleMove(loc.key)}
            variant="location"
          >
            –ü–µ—Ä–µ–π—Ç–∏ –≤ {loc.name}
          </Button>
        ))}
      </DestinationsList>
    </ActionsWrapper>
  );
};

export default LocationActions;
