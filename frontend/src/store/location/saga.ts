import { put, takeLatest } from "redux-saga/effects";
import {
  fetchLocationsRequest,
  fetchLocationsSuccess,
  fetchLocationsFailure,
  fetchShopsRequest,
  fetchShopsSuccess,
  fetchShopsFailure,
  fetchArenasRequest,
  fetchArenasSuccess,
  fetchArenasFailure,
  createLocationRequest,
  createLocationSuccess,
  createLocationFailure,
  deleteLocationRequest,
  deleteLocationSuccess,
  deleteLocationFailure,
} from "./index";
import { container } from "@/inversify.config";
import { TYPES } from "@/services/types";
import { LocationService } from "@/services/LocationService";
import { apiSaga } from "@/services/sagaHelpers/apiSaga";
import { Location } from "./types";

// üîπ –í—Å–µ –ª–æ–∫–∞—Ü–∏–∏
function* fetchLocationsSaga() {
  try {
    const service = container.get<LocationService>(TYPES.LocationService);
    const data: Location[] = yield* apiSaga(service, "getAll");
    yield put(fetchLocationsSuccess(data));
  } catch (err) {
    yield put(fetchLocationsFailure("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π"));
  }
}

// üîπ –ú–∞–≥–∞–∑–∏–Ω—ã
function* fetchShopsSaga() {
  try {
    const service = container.get<LocationService>(TYPES.LocationService);
    const data: Location[] = yield* apiSaga(service, "getShops");
    yield put(fetchShopsSuccess(data));
  } catch (err) {
    yield put(fetchShopsFailure("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤"));
  }
}

// üîπ –ê—Ä–µ–Ω—ã
function* fetchArenasSaga() {
  try {
    const service = container.get<LocationService>(TYPES.LocationService);
    const data: Location[] = yield* apiSaga(service, "getArenas");
    yield put(fetchArenasSuccess(data));
  } catch (err) {
    yield put(fetchArenasFailure("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä–µ–Ω"));
  }
}

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
function* createLocationSaga(action: ReturnType<typeof createLocationRequest>) {
  try {
    const service = container.get<LocationService>(TYPES.LocationService);
    const location: Location = yield* apiSaga(
      service,
      "createLocation",
      action.payload
    );
    yield put(createLocationSuccess(location));
  } catch (err) {
    yield put(createLocationFailure("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"));
  }
}

// üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
function* deleteLocationSaga(action: ReturnType<typeof deleteLocationRequest>) {
  try {
    const service = container.get<LocationService>(TYPES.LocationService);
    yield* apiSaga(service, "deleteLocation", action.payload);
    yield put(deleteLocationSuccess(action.payload));
  } catch (err) {
    yield put(deleteLocationFailure("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"));
  }
}

export function* locationSaga() {
  yield takeLatest(fetchLocationsRequest.type, fetchLocationsSaga);
  yield takeLatest(fetchShopsRequest.type, fetchShopsSaga);
  yield takeLatest(fetchArenasRequest.type, fetchArenasSaga);
  yield takeLatest(createLocationRequest.type, createLocationSaga);
  yield takeLatest(deleteLocationRequest.type, deleteLocationSaga);
}
