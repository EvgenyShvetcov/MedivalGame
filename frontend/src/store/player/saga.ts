import { put, takeLatest } from "redux-saga/effects";
import {
  fetchPlayerRequest,
  fetchPlayerSuccess,
  fetchPlayerFailure,
  changeLocationRequest,
  changeLocationSuccess,
  changeLocationFailure,
  pingRequest,
  pingSuccess,
  pingFailure,
  checkOnlineRequest,
  checkOnlineSuccess,
  checkOnlineFailure,
  assignAttributesFailure,
  assignAttributesSuccess,
  assignAttributesRequest,
} from ".";
import { TYPES } from "@/services/types";
import { container } from "@/inversify.config";
import { PlayerService } from "@/services/PlayerService";
import { IPlayer } from "./types";
import { apiSaga } from "@/services/sagaHelpers/apiSaga";

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞
function* fetchPlayerSaga() {
  try {
    const playerService = container.get<PlayerService>(TYPES.PlayerService);
    const data: IPlayer = yield* apiSaga(playerService, "getCurrentPlayer");
    yield put(fetchPlayerSuccess(data));
  } catch (err: any) {
    yield put(fetchPlayerFailure("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–∞"));
  }
}

function* assignAttributesSaga(
  action: ReturnType<typeof assignAttributesRequest>
) {
  try {
    const playerService = container.get<PlayerService>(TYPES.PlayerService);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    yield* apiSaga(playerService, "assignAttributes", action.payload);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const updatedPlayer: IPlayer = yield* apiSaga(
      playerService,
      "getCurrentPlayer"
    );

    yield put(assignAttributesSuccess(updatedPlayer));
  } catch (err) {
    yield put(assignAttributesFailure("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"));
  }
}

// üîπ –°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
function* changeLocationSaga(action: ReturnType<typeof changeLocationRequest>) {
  try {
    const playerService = container.get<PlayerService>(TYPES.PlayerService);

    // —Å–Ω–∞—á–∞–ª–∞ –º–µ–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é
    yield* apiSaga(playerService, "changeLocation", action.payload);

    // –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const updatedPlayer: IPlayer = yield* apiSaga(
      playerService,
      "getCurrentPlayer"
    );

    // –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–æ—Ä
    yield put(changeLocationSuccess(updatedPlayer));
  } catch (err) {
    yield put(changeLocationFailure("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"));
  }
}

// üîπ –ü–∏–Ω–≥
function* pingSaga() {
  try {
    const playerService = container.get<PlayerService>(TYPES.PlayerService);
    yield* apiSaga(playerService, "ping");
    yield put(pingSuccess());
  } catch (err) {
    yield put(pingFailure("–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞"));
  }
}

// üîπ –û–Ω–ª–∞–π–Ω
function* checkOnlineSaga() {
  try {
    const playerService = container.get<PlayerService>(TYPES.PlayerService);
    const data: { online: boolean } = yield* apiSaga(
      playerService,
      "checkOnline"
    );
    yield put(checkOnlineSuccess(data.online));
  } catch (err) {
    yield put(checkOnlineFailure("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–Ω–ª–∞–π–Ω–∞"));
  }
}

export function* playerSaga() {
  yield takeLatest(fetchPlayerRequest.type, fetchPlayerSaga);
  yield takeLatest(changeLocationRequest.type, changeLocationSaga);
  yield takeLatest(assignAttributesRequest.type, assignAttributesSaga);
  yield takeLatest(pingRequest.type, pingSaga);
  yield takeLatest(checkOnlineRequest.type, checkOnlineSaga);
}
